@using HBS.TinyMCE_Wysiwyg
@using Kentico.Forms.Web.Mvc
@model TinyMCEInputComponent

@* Gets a collection of system HTML attributes necessary for the correct functionality of the component input fields *@
@{
                /**/

                IDictionary<string, object> htmlAttributes = ViewData.GetEditorHtmlAttributes();
}

@* This will hold the actual field *@
@{
    htmlAttributes.Add("data-name", Html.IdFor(Model => Model.HtmlContent));
}
@Html.HiddenFor(m => m.HtmlContent, htmlAttributes)

@* Add Data-Attributes that will pass the properties to the javascript *@
@{
    htmlAttributes.Add("data-tools", Model.Tools);
    htmlAttributes.Add("data-plugins", Model.Plugins);
    htmlAttributes.Add("data-enableformatting", Model.EnableFormatting);
    htmlAttributes.Remove("data-name");
    htmlAttributes.Add("data-name", "Editor_" + Html.IdFor(Model => Model.HtmlContent));
    htmlAttributes.Add("style", "height: auto;");
}
@* Render the DIV that the TinyMCE will attach onto *@
@Html.BeginDiv(HtmlAttributes: htmlAttributes)
@Html.Raw(Model.HtmlContent)
@Html.EndDiv()

<script type="text/javascript">
    // Initalize the TinyMCE component, passing the data-name attribute values of the editor and hidden element so it can latch onto it
    InitalizeTinyMCEInputComponent("Editor_@Html.IdFor(Model => Model.HtmlContent)", "@Html.IdFor(Model => Model.HtmlContent)");
</script>